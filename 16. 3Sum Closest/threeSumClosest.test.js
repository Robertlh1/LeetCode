const threeSumClosest = require('./threeSumClosest')

describe('Testing threeSumClosest', () => {
  test('threeSumClosest() should return 2 when the input is [-1,2,1,-4], target = 1', () => {
    expect(threeSumClosest([-1,2,1,-4], 1)).toBe(2);
  })
  test('threeSumClosest() should return 0 when the input is [0,0,0], target = 1', () => {
    expect(threeSumClosest([0,0,0], 1)).toBe(0);
  })
  test('threeSumClosest() should return -2 when the input is [4,0,5,-5,3,3,0,-4,-5], target = -2', () => {
    expect(threeSumClosest([4,0,5,-5,3,3,0,-4,-5], -2)).toBe(-2);
  })
  test('threeSumClosest() should return 2260 when the input is a very long array with target = 2260', () => {
    expect(threeSumClosest([-593,973,-526,683,538,-80,292,77,145,204,464,-455,-536,-277,7,114,-837,671,420,-730,111,950,-778,-71,644,-295,876,248,689,984,509,-144,449,672,791,772,592,-465,242,834,-690,-809,510,-995,-316,-301,-405,844,-577,-515,-689,351,566,-994,-765,-332,-528,928,756,64,958,872,-84,542,-679,-882,670,-123,577,878,-736,-903,771,380,-154,439,-510,863,11,183,-922,-868,-370,429,417,31,-914,529,200,622,-479,-702,-613,-8,-589,-452,-222,757,-669,-57,-587,-668,988,545,704,-10,-750,-364,557,405,-283,-338,-286,-878,460,-806,156,-450,-700,-341,597,328,-502,895,168,627,221,830,910,556,208,-272,851,567,-42,357,10,-667,-352,237,873,-525,552,-576,558,105,-413,409,-196,-637,55,749,-929,422,341,-311,471,-410,991,34,138,37,926,-724,939,110,-870,424,-175,236,839,-25,570,-946,-654,613,933,12,-805,180,-468,-92,-52,-475,539,194,499,-645,435,87,-518,15,-747,-673,-976,-498,608,-657,-592,-379,452,287,-210,-568,307,563,-37,-358,896,779,-600,-570,112,869,-39,665,716,-478,-139,-180,911,-992,-913,861,-291,264,-718,-100,-467,985,-169,-484,562,-197,821,-235,-830,270,-31,263,291,348,-511,-466,-193,-194,962,837,945,299,163,995,190,-19,-436,888,367,294,-386,486,-202,316,-221,3,-626,-767,-534,780,283,-430,-947,725,-858,810,-282,-304,-119,-659,-890,-892,56,-426,-65,338,265,-288,-12,-598,189,153,427,72,431,179,-764,798,333,356,-422,976,-148,664,-862,-60,-184,-167,154,54,-431,643,540,-979,-875,-361,-829,26,104,-721,-172,-477,-780,286,-267,611,850,583,24,-445,-618,327,39,-697,-228,774,-64,89,-398,167,133,-48,951,918,568,498,586,533,295,-88,454,-471,-755,289,591,881,-249,220,477,701,-168,-306,-53,-448,734,-795,-588,-115,-298,667,-114,582,-399,-473,-954,-164,-300,858,604,-134,207,172,97,708,76,-323,804,855,537,378,877,185,-665,-604,285,-417,-110,953,-265,446,-908,547,90,85,227,-811,-66,824,-397,859,-781,-542,-831,680,27,-58,685,814,852,-753,84,186,-44,-558,-634,899,-6,-67,100,404,315,-1000,-345,469,-712,479,229,366,-297,-54,326,472,-776,594,296,69,-389,396,-49,-264,554,-722,497,700,724,581,-132,-620,823,-34,-104,-279,-964,-742,370,-156,-661,252,-538,-190,-973,-797,397,585,970,-980,-254,-918,-996,-945,290,231,625,275,-82,-457,-241,-416,-715,-560,614,635,8,-233,571,829,118,-650,17,-143,-231,-564,618,730,789,-802,775,727,259,676,731,795,-970,-292,-666,-192,184,893,-129,-535,-309,-791,-865,-789,-359,-63,-43,-508,835,-887,444,-128,841,-893,225,1000,251,403,-944,-504,-274,-726,818,761,-597,932,817,-402,-583,226,359,35,-388,-74,-460,-333,-610,-782,-219,-696,508,161,-420,-69,549,-47,765,-910,-856,-796,-741,528,-911,-440,-869,-259,760,130,-368,-547,428,-2,202,913,-601,698,941,697,660,-242,-79,555,652,306,741,-5,-95,127,-545,-224,-902,-711,710,-211,-270,-532,-3,-40,70,564,0,-655,770,485,511,52,5,-959,-81,147,-35,-881,-733,578,132,-956,989,-73,-355,-572,811,-55,-833,261,729,-438,-209,-919,371,-552,253,-788,-343,115,375,-670,-896,-227,-815,551,38,-958,-503,561,-509,458,754,494,-337,400,384,-151,-276,758,-935,345,19,-925,481,334,-239,300,-965,-487,-432,173,-810,354,423,-120,74,-569,349,696,782,177,188,6,587,-131,938,-176,-113,964,-162,523,318,589,143,921,20,-462,-713,907,28,-201,638,-647,-841,266,-439,-843,313,-313,-103,280,364,693,-491,195,-906,669,796,808,-90,155,-894,-854,-646,718,109,-594,-108,-307,140,705,182,-217,980,-579,-551,419,-330,391,-325,-932,-855,-223,-846,-116,-891,210,-9,-45,385,-229,-447,940,916,483,-371,-118,381,-396,600,565,362,-273,880,-312,146,-540,-566,666,408,885,-801,-449,330,-258,448,-512,75,101,994,751,-253,117,176,842,576,-486,903,-124,232,609,-533,580,-27,990,632,377,541,181,-94,-531,645,867,536,-226,833,209,621,-464,33,343,-912,332,-501,-779,712,-232,-99,-529,517,800,166,-772,389,36,-75,521,308,-362,260,201,942,891,548,500,715,66,373,-36,-615,-641,-218,390,-153,-960,919,-303,-26,-709,897,-857,170,513,650,-876,-245,-933,-373,32,-940,617,-962,-703,-15,763,678,369,352,350,819,-820,661,1,206,-135,898,849,679,-938,157,-683,-553,-328,845,-883,-948,433,407,636,-177,-744,-347,113,870,-314,831,766,588,67,60,-456,317,840,-921,-554,-102,-787,569,-686,-136,-97,447,-608,917,199,-198,134,695,312,-674,-117], 2260)).toBe(2260);
  })
  test('threeSumClosest() should return -2993 when the input is a very long array with target = -8446', () => {
    expect(threeSumClosest([-684,-142,-161,-789,85,854,556,-344,178,802,-146,497,-569,259,-916,-942,-261,-941,-111,-553,884,-10,358,-903,-180,-505,-487,805,995,671,685,-112,-637,534,278,-920,-494,896,450,-604,76,-589,885,228,161,-130,-226,976,108,955,162,517,670,-747,-247,-280,-632,-53,573,-612,-528,761,-515,-796,481,799,-274,-234,827,-921,89,-388,-158,252,180,-271,514,-469,316,342,505,-476,-253,506,-871,555,679,280,867,117,-987,-999,539,-588,104,773,-740,-410,-391,-285,-448,819,-608,211,-59,566,476,523,-198,775,-683,-86,982,-318,979,-716,664,-759,592,-46,873,453,-729,907,-428,-315,302,298,-357,-734,-116,-207,998,-868,521,-347,-756,-658,546,-579,-156,-649,310,28,-546,334,-892,323,-902,-299,680,-863,118,729,-981,125,657,-266,131,-210,214,-600,-765,-277,-681,-667,835,891,152,509,589,972,862,-933,847,-227,-364,-339,-173,-457,68,-879,-39,-857,119,-424,-306,-874,-206,770,712,441,999,-602,699,-820,549,193,277,-250,-218,778,-853,860,-298,-859,-900,-483,580,42,793,-700,-841,801,-441,-642,744,-825,954,-185,-208,-148,-41,552,971,-362,554,46,410,-864,409,637,-809,990,154,765,365,-3,-29,106,894,-818,-936,842,716,-989,-630,-625,-295,486,-776,-443,-125,-545,360,-677,1,-187,-251,223,789,-192,-836,-703,-439,-668,724,201,8,463,-827,-826,-283,-663,224,54,197,-918,-618,253,-670,-119,159,-915,-946,-834,515,535,-972,740,233,429,-964,-194,604,686,-829,-392,-338,807,536,435,-40,-91,285,-325,385,107,-897,157,-486,502,886,4,462,469,-446,755,-927,-176,478,268,319,-291,590,212,404,804,171,-28,243,367,-564,618,663,176,213,236,-577,865,-929,943,468,-334,-500,511,-948,-755,-634,-523,-567,-965,-662,-877,-735,44,460,745,-51,-744,973,205,858,190,-6,-873,20,-328,612,-816,572,-514,-287,611,362,407,-550,-183,826,952,-839,-679,-669,99,-406,764,-340,-671,-449,-400,624,375,417,732,-928,696,-539,-270,-336,-833,-460,445,196,-705,50,-394,69,164,145,255,-317,249,-184,-652,-413,449,-917,-971,291,902,-327,32,-399,419,-907,779,-7,583,513,-870,825,625,790,-414,850,856,-431,-598,398,-311,837,-471,43,487,-134,-106,-124,-42,974,430,-15,-323,-433,785,208,-202,950,-752,395,416,66,-47,560,596,-188,-257,377,60,384,-478,633,-479,774,-858,-162,350,-954,937,381,530,-373,-430,312,-831,963,421,-324,-573,-522,-354,-52,403,175,-619,-595,691,771,-804,565,96,-408,411,-930,-848,-174,479,-970,442,3,-586,-490,-758,-386,169,-170,912,-628,-407,-44,752,251,743,-832,-530,-275,146,-24,704,498,-31,526,88,748,-9,38,227,-547,-409,-622,-16,-693,428,-30,-704,-860,-418,-429,-641,-803,-71,400,-771,-98,-262,-109,-472,-149,-470,324,-25,347,909,-883,782,-393,120,965,-97,-961,139,-940,98,-695,452,-326,533,-382,-599,339,-697,830,-265,-541,-762,-459,492,687,-529,-56,325,-806,693,-985,606,882,-644,503,-276,-464,-193,522,-880,7,839,399,-113,731,-240,57,124,647,892,-718,874,638,2,944,181,195,688,-885,812,841,-456,579,-904,353,-888,-745,448,488,-133,-773,330,562,709,105,739,-770,929,-81,114,-212,-810,-294,-105,-640,-321,-167,-797,-689,642,294,899,928,-707,-349,-359,-931,-437,-361,866,210,-425,644,958,187,203,734,299,-743,735,-994,184,722,344,148,15,-219,-540,797,363,970,335,315,-82,525,474,-341,650,-587,809,749,78,-331,-607,-560,501,-791,-623,444,-980,-710,26,977,10,352,-333,-369,-477,824,97,394,-937,941,-843,547,-383,-229,-984,763,-241,393,-647,814,-706,820,725,601,-551,73,-416,640,-635,-830,226,433,-823,630,-465,374,-659,-279,-739,682,-308,-817,-371,-150,-805,-675,-513,935,-583,192,414,13,-982,366,-898,-159,-558,-199,-763,-654,-535,165,508,245,757,-526,-343,345,-922,-292,247,-300,-65,471,-538,-986,-396,472,494,-182,454,-239,-721,465,-882,-66,-570,-442,424,723,0,-1000,-606,-609,-493,-801,-656,300,-365,-243,651,-129,617,491,-912,605,-769,328,698,-467,-379,593,558,-258,194,-228,-910,371,17,993,-284,234,-923,-935,301,307,-661,960,520,270,962,-312,910,-144,-938,-177,715,217,-651,53,832,392,-844,-139,-959,-720,-214,876,519,346,258,-196,-723,545,373,136,-72,818,-717,-355,25,-605,571,-924,134,880,576,378,983,-4,-955,719,538,906,123,34,821,-438,281,695,-489,189,-638,870,144,-320,984,-384,370,275,-235,495,710,309,701,992,-536,542,-715,-787,115,151,128,-631,272,747,-249,354,-215,242,-60,-496,-372,869,561,-205,-316,-840,597,961,-108,274,-499,422,237,496,660,440,-780,273,754,-375,786,717,-222,-43,619,-143,-726,-237,490], -8446)).toBe(-2993);
  })
})