Note: Runtime is highly variable between submissions and I don't have a premium subscription,
  which places me in a lower tier.

Second attempt, refactored my query using the case function for a significant speed increase

Runtime: 602 ms, faster than 78.17% of MySQL online submissions for Calculate Special Bonus.
Memory Usage: 0B, less than 100.00% of MySQL online submissions for Calculate Special Bonus.
# Write your MySQL query statement below
SELECT employee_id,
    CASE
        WHEN employee_id % 2 = 1
        AND name NOT LIKE 'M%'
        THEN salary
        ELSE 0
    END AS bonus
FROM Employees
ORDER BY employee_id;

First attempt, which ended up being far too slow.

Runtime: 1185 ms, faster than 11.58% of MySQL online submissions for Calculate Special Bonus.
Memory Usage: 0B, less than 100.00% of MySQL online submissions for Calculate Special Bonus.

# Write your MySQL query statement below
SELECT employee_id, IFNULL((
    SELECT salary
    FROM Employees
    AS b
    WHERE e.employee_id = b.employee_id
    AND e.employee_id % 2 = 1
    AND e.name NOT LIKE 'M%'
), 0) AS bonus
FROM Employees AS e
ORDER BY e.employee_id;

Table: Employees

+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| employee_id | int     |
| name        | varchar |
| salary      | int     |
+-------------+---------+
employee_id is the primary key for this table.
Each row of this table indicates the employee ID, employee name, and salary.


Write an SQL query to calculate the bonus of each employee. The bonus of an employee is 100% of their salary if the ID of the employee is an odd number and the employee name does not start with the character 'M'. The bonus of an employee is 0 otherwise.

Return the result table ordered by employee_id.

The query result format is in the following example.



Example 1:

Input:
Employees table:
+-------------+---------+--------+
| employee_id | name    | salary |
+-------------+---------+--------+
| 2           | Meir    | 3000   |
| 3           | Michael | 3800   |
| 7           | Addilyn | 7400   |
| 8           | Juan    | 6100   |
| 9           | Kannon  | 7700   |
+-------------+---------+--------+
Output:
+-------------+-------+
| employee_id | bonus |
+-------------+-------+
| 2           | 0     |
| 3           | 0     |
| 7           | 7400  |
| 8           | 0     |
| 9           | 7700  |
+-------------+-------+
Explanation:
The employees with IDs 2 and 8 get 0 bonus because they have an even employee_id.
The employee with ID 3 gets 0 bonus because their name starts with 'M'.
The rest of the employees get a 100% bonus.